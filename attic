/* External send/recv functions corresponding to required prototype */
int
send_tcp_packet(ipaddr_t dst, u16_t src_port, u16_t dst_port,
                u32_t seq_nb, u32_t ack_nb, u8_t flags, u16_t win_sz,
                const char* data, int data_sz)
{
    int len;
    Data* dat = (Data*)calloc(1, sizeof(Data));
    Header* hdr = (Header*)calloc(1, sizeof(Header));
    
    hdr->dst = dst;
    hdr->sport = src_port;
    hdr->dport = dst_port;
    hdr->seqno = seq_nb;
    hdr->ackno = ack_nb;
    hdr->flags = flags;
    hdr->window = win_sz;
    
    dat->content = (uchar*)data;
    dat->len = data_sz;
    
    len = _send_tcp_packet(hdr, dat);
    free(dat);
    free(hdr);
    
    return len;
}

int
recv_tcp_packet(ipaddr_t* src, u16_t* src_port, u16_t* dst_port,
                u32_t* seq_nb, u32_t* ack_nb, u8_t* flags, u16_t* win_sz,
                char* data, int* data_sz)
{
    int len;
    Data* dat = (Data*)calloc(1, sizeof(Data));
    Header* hdr = (Header*)calloc(1, sizeof(Header));
    
    len = _recv_tcp_packet(hdr, dat);
    
    *src = hdr->src;
    *src_port = hdr->sport;
    *dst_port = hdr->dport;
    *seq_nb = hdr->seqno;
    *ack_nb = hdr->ackno;
    *flags = hdr->flags;
    *win_sz = hdr->window;
    
    data = (char*)calloc(dat->len, sizeof(uchar));
    memcpy(data, dat->content, dat->len);
    *data_sz = dat->len;
    
    free(dat->content);
    free(dat);
    free(hdr);
    
    return len;
}